# .github/workflows/docker-build-all.yml

name: Build and Push Alist Docker Images (Base and Full)

# 控制工作流何时运行
on:
  push:
    branches:
      - main # 或者你的默认分支名
  release:
    types: [published] # 当在 GitHub 发布 Release 时触发
  workflow_dispatch: # 允许手动触发

jobs:
  # --- Job 1: 构建基础版 (alist) ---
  build-base:
    name: Build Base Image (alist)
    runs-on: ubuntu-latest
    permissions:
      contents: read      # 需要读取代码库内容
      packages: write     # 需要写入 ghcr.io

    steps:
      # 步骤 1: 签出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 3: 登录到 GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # 自动获取用户名/组织名
          password: ${{ secrets.GITHUB_TOKEN }}    # 使用自动生成的 Token

      # 步骤 4: 提取 Docker 元数据 (用于 alist 基础镜像)
      - name: Extract Docker metadata (Base)
        id: meta_base
        uses: docker/metadata-action@v5
        with:
          # 目标镜像名称: ghcr.io/用户名/alist
          images: ghcr.io/${{ github.repository_owner }}/alist
          tags: |
            # 为默认分支生成 'latest' 标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 为 Git 标签 (例如 v1.2.3) 生成相应的 Docker 标签 (1.2.3)
            type=semver,pattern={{version}}
            # 为 Git 标签 (例如 v1.2.3) 生成相应的 Docker 标签 (v1.2.3)
            type=semver,pattern={{raw}}
            # 为每次 commit 生成短 SHA 标签
            type=sha,prefix=,format=short

      # 步骤 5: 构建并推送基础镜像 (alist)
      - name: Build and push Base Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile # 确认指向正确的 Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # 非 PR 事件才推送
          tags: ${{ steps.meta_base.outputs.tags }} # 使用上面生成的标签
          labels: ${{ steps.meta_base.outputs.labels }} # 使用上面生成的标签
          cache-from: type=gha # 从 GHA 缓存加载
          cache-to: type=gha,mode=max # 写入 GHA 缓存
          # 注意：这里没有 build-args，使用 Dockerfile 中的默认值 (false)

  # --- Job 2: 构建完整版 (alist-full) ---
  build-full:
    name: Build Full Image (alist-full)
    runs-on: ubuntu-latest
    permissions:
      contents: read      # 需要读取代码库内容
      packages: write     # 需要写入 ghcr.io
    # 可选: 如果希望基础版成功后再构建完整版，取消下面这行的注释
    # needs: build-base

    steps:
      # 步骤 1: 签出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 3: 登录到 GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }} # 自动获取用户名/组织名
          password: ${{ secrets.GITHUB_TOKEN }}    # 使用自动生成的 Token

      # 步骤 4: 提取 Docker 元数据 (用于 alist-full 镜像)
      - name: Extract Docker metadata (Full)
        id: meta_full
        uses: docker/metadata-action@v5
        with:
          # 目标镜像名称: ghcr.io/用户名/alist-full
          images: ghcr.io/${{ github.repository_owner }}/alist-full
          # 使用标准标签，因为镜像名已不同
          tags: |
            # 为默认分支生成 'latest' 标签
            type=raw,value=latest,enable={{is_default_branch}}
            # 为 Git 标签 (例如 v1.2.3) 生成相应的 Docker 标签 (1.2.3)
            type=semver,pattern={{version}}
            # 为 Git 标签 (例如 v1.2.3) 生成相应的 Docker 标签 (v1.2.3)
            type=semver,pattern={{raw}}
            # 为每次 commit 生成短 SHA 标签
            type=sha,prefix=,format=short

      # 步骤 5: 构建并推送完整镜像 (alist-full)
      - name: Build and push Full Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile # 确认指向正确的 Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # 非 PR 事件才推送
          tags: ${{ steps.meta_full.outputs.tags }} # 使用上面生成的标签
          labels: ${{ steps.meta_full.outputs.labels }} # 使用上面生成的标签
          # 传递 build arguments 来安装 aria2 和 ffmpeg
          build-args: |
            INSTALL_ARIA2=true
            INSTALL_FFMPEG=true
          cache-from: type=gha # 从 GHA 缓存加载
          cache-to: type=gha,mode=max # 写入 GHA 缓存
